{
  
    
        "post0": {
            "title": "My Title",
            "content": "Assignment 3 . Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . emissions_df = pd.read_csv(&#39;emissions.csv&#39;) . emissions_df.shape . (8385, 12) . . emissions_df.columns . Index([&#39;Country&#39;, &#39;Year&#39;, &#39;Emissions.Type.CO2&#39;, &#39;Emissions.Type.N2O&#39;, &#39;Emissions.Type.CH4&#39;, &#39;Emissions.Sector.Power Industry&#39;, &#39;Emissions.Sector.Buildings&#39;, &#39;Emissions.Sector.Transport&#39;, &#39;Emissions.Sector.Other Industry&#39;, &#39;Emissions.Sector.Other sectors&#39;, &#39;Ratio.Per GDP&#39;, &#39;Ratio.Per Capita&#39;], dtype=&#39;object&#39;) . emissions_df.dtypes . Country object Year int64 Emissions.Type.CO2 float64 Emissions.Type.N2O float64 Emissions.Type.CH4 float64 Emissions.Sector.Power Industry float64 Emissions.Sector.Buildings float64 Emissions.Sector.Transport float64 Emissions.Sector.Other Industry float64 Emissions.Sector.Other sectors float64 Ratio.Per GDP float64 Ratio.Per Capita float64 dtype: object . emissions_df.head(2) . Country Year Emissions.Type.CO2 Emissions.Type.N2O Emissions.Type.CH4 Emissions.Sector.Power Industry Emissions.Sector.Buildings Emissions.Sector.Transport Emissions.Sector.Other Industry Emissions.Sector.Other sectors Ratio.Per GDP Ratio.Per Capita . 0 Afghanistan | 1970 | 2670.0 | 1820.0 | 12800.0 | 0.06 | 0.58 | 0.23 | 0.07 | 0.53 | 1.557705 | 0.0 | . 1 Afghanistan | 1971 | 2630.0 | 1850.0 | 12900.0 | 0.06 | 0.58 | 0.23 | 0.07 | 0.53 | 1.517670 | 0.0 | . emissions_df.tail(2) . Country Year Emissions.Type.CO2 Emissions.Type.N2O Emissions.Type.CH4 Emissions.Sector.Power Industry Emissions.Sector.Buildings Emissions.Sector.Transport Emissions.Sector.Other Industry Emissions.Sector.Other sectors Ratio.Per GDP Ratio.Per Capita . 8383 Zimbabwe | 2011 | 4130.0 | 11300.0 | 10500.0 | 5.95 | 1.32 | 2.28 | 1.52 | 0.91 | 1.797911 | 1.193823 | . 8384 Zimbabwe | 2012 | 4140.0 | 11300.0 | 10600.0 | 5.55 | 1.34 | 2.58 | 1.97 | 1.04 | 1.775448 | 1.084327 | . emissions_df.describe() . Year Emissions.Type.CO2 Emissions.Type.N2O Emissions.Type.CH4 Emissions.Sector.Power Industry Emissions.Sector.Buildings Emissions.Sector.Transport Emissions.Sector.Other Industry Emissions.Sector.Other sectors Ratio.Per GDP Ratio.Per Capita . count 8385.000000 | 8385.000000 | 8.385000e+03 | 8.385000e+03 | 8385.000000 | 8385.000000 | 8385.000000 | 8385.000000 | 8385.000000 | 8385.000000 | 8385.000000 | . mean 1991.000000 | 10758.078006 | 3.477169e+04 | 1.223321e+05 | 40.045493 | 16.391436 | 21.004086 | 27.250216 | 12.596899 | 8.469879 | 4.216300 | . std 12.410414 | 36931.232932 | 1.167005e+05 | 5.199964e+05 | 199.925297 | 65.277457 | 110.884436 | 125.006785 | 56.024621 | 26.810393 | 49.048396 | . min 1970.000000 | 0.070000 | 8.400000e-01 | 7.800000e-01 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.148874 | 0.000000 | . 25% 1980.000000 | 264.000000 | 8.430000e+02 | 2.540000e+03 | 0.090000 | 0.110000 | 0.220000 | 0.080000 | 0.050000 | 1.668099 | 0.362292 | . 50% 1991.000000 | 1600.000000 | 4.420000e+03 | 1.420000e+04 | 1.260000 | 0.660000 | 1.610000 | 1.150000 | 0.760000 | 3.763441 | 0.571809 | . 75% 2002.000000 | 6180.000000 | 1.930000e+04 | 5.940000e+04 | 12.690000 | 5.810000 | 8.640000 | 11.020000 | 6.630000 | 9.040957 | 0.974648 | . max 2012.000000 | 525000.000000 | 1.660000e+06 | 9.920000e+06 | 4154.020000 | 908.390000 | 1807.710000 | 3160.860000 | 1634.750000 | 791.265300 | 937.097800 | . emissions_df[&#39;Ratio.Per GDP&#39;] . 0 1.557705 1 1.517670 2 1.357590 3 1.307901 4 1.425016 ... 8380 1.720451 8381 1.728668 8382 1.761650 8383 1.797911 8384 1.775448 Name: Ratio.Per GDP, Length: 8385, dtype: float64 . r = emissions_df[&#39;Ratio.Per GDP&#39;] r.plot(kind=&#39;line&#39;) . &lt;AxesSubplot:&gt; . r.loc[0:9] . 0 1.557705 1 1.517670 2 1.357590 3 1.307901 4 1.425016 5 1.383556 6 1.359605 7 1.361826 8 1.434308 9 1.345154 Name: Ratio.Per GDP, dtype: float64 . # as well as the matching 10 elements of a different column that has interesting text emissions_df.loc[0:9,[&#39;Country&#39;,&#39;Year&#39;,&#39;Ratio.Per GDP&#39;]] . Country Year Ratio.Per GDP . 0 Afghanistan | 1970 | 1.557705 | . 1 Afghanistan | 1971 | 1.517670 | . 2 Afghanistan | 1972 | 1.357590 | . 3 Afghanistan | 1973 | 1.307901 | . 4 Afghanistan | 1974 | 1.425016 | . 5 Afghanistan | 1975 | 1.383556 | . 6 Afghanistan | 1976 | 1.359605 | . 7 Afghanistan | 1977 | 1.361826 | . 8 Afghanistan | 1978 | 1.434308 | . 9 Afghanistan | 1979 | 1.345154 | . # and make a bar plot with the text values horizontally and the numeric values as the bar heights new_df = emissions_df.loc[0:9,[&#39;Country&#39;,&#39;Ratio.Per GDP&#39;]] new_df.plot(kind=&#39;bar&#39;, x=&#39;Country&#39;, y=&#39;Ratio.Per GDP&#39;) . &lt;AxesSubplot:xlabel=&#39;Country&#39;&gt; . new_df.plot(kind=&#39;barh&#39;, x=&#39;Country&#39;) . &lt;AxesSubplot:ylabel=&#39;Country&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) a = new_df.plot(kind=&#39;barh&#39;, x=&#39;Country&#39;, y= &#39;Ratio.Per GDP&#39;) a.set_xlabel(&#39;Emissions per GDP&#39;, fontsize=12) a.set_ylabel(&#39;Country&#39;, fontsize=12) a.set_title(&#39;Afghanistan Emissions per GDP from 1970-1979&#39;) . Text(0.5, 1.0, &#39;Afghanistan Emissions per GDP from 1970-1979&#39;) . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . emissions_with_year = emissions_df.loc[0:9,[&#39;Country&#39;, &#39;Year&#39;,&#39;Ratio.Per GDP&#39;]] b = emissions_with_year.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y= &#39;Ratio.Per GDP&#39;, figsize=(10,5)) b.set_xlabel(&#39;Year&#39;, fontsize=12) b.set_ylabel(&#39;Emissions per GDP&#39;, fontsize=12) b.set_title(&#39;Afghanistan Emissions per GDP from 1970-1979&#39;) b.legend([&#39;Afghanistan&#39;], fontsize=13) . &lt;matplotlib.legend.Legend at 0x7fb5979239d0&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . . x = emissions_df.loc[0:42,[&#39;Country&#39;,&#39;Year&#39;,&#39;Ratio.Per GDP&#39;]] x . Country Year Ratio.Per GDP . 0 Afghanistan | 1970 | 1.557705 | . 1 Afghanistan | 1971 | 1.517670 | . 2 Afghanistan | 1972 | 1.357590 | . 3 Afghanistan | 1973 | 1.307901 | . 4 Afghanistan | 1974 | 1.425016 | . 5 Afghanistan | 1975 | 1.383556 | . 6 Afghanistan | 1976 | 1.359605 | . 7 Afghanistan | 1977 | 1.361826 | . 8 Afghanistan | 1978 | 1.434308 | . 9 Afghanistan | 1979 | 1.345154 | . 10 Afghanistan | 1980 | 1.338219 | . 11 Afghanistan | 1981 | 1.335121 | . 12 Afghanistan | 1982 | 1.350909 | . 13 Afghanistan | 1983 | 1.352035 | . 14 Afghanistan | 1984 | 1.294653 | . 15 Afghanistan | 1985 | 1.235054 | . 16 Afghanistan | 1986 | 1.113449 | . 17 Afghanistan | 1987 | 1.122661 | . 18 Afghanistan | 1988 | 1.123060 | . 19 Afghanistan | 1989 | 1.013531 | . 20 Afghanistan | 1990 | 0.980756 | . 21 Afghanistan | 1991 | 0.935333 | . 22 Afghanistan | 1992 | 0.856306 | . 23 Afghanistan | 1993 | 0.808294 | . 24 Afghanistan | 1994 | 0.777309 | . 25 Afghanistan | 1995 | 0.785834 | . 26 Afghanistan | 1996 | 0.826212 | . 27 Afghanistan | 1997 | 0.848310 | . 28 Afghanistan | 1998 | 0.864519 | . 29 Afghanistan | 1999 | 0.893531 | . 30 Afghanistan | 2000 | 0.799289 | . 31 Afghanistan | 2001 | 0.691034 | . 32 Afghanistan | 2002 | 0.755036 | . 33 Afghanistan | 2003 | 0.761899 | . 34 Afghanistan | 2004 | 0.731362 | . 35 Afghanistan | 2005 | 0.728452 | . 36 Afghanistan | 2006 | 0.721540 | . 37 Afghanistan | 2007 | 0.696900 | . 38 Afghanistan | 2008 | 0.774093 | . 39 Afghanistan | 2009 | 0.812941 | . 40 Afghanistan | 2010 | 0.906098 | . 41 Afghanistan | 2011 | 0.905995 | . 42 Afghanistan | 2012 | 0.880562 | . . y = x.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y= &#39;Ratio.Per GDP&#39;, figsize=(10,5)) y.set_xlabel(&#39;Year&#39;, fontsize=12) y.set_ylabel(&#39;Emissions per GDP&#39;, fontsize=12) y.set_title(&#39;Afghanistan Emissions per GDP from 1970-2012&#39;) y.legend([&#39;Afghanistan&#39;], loc=&#39;upper center&#39;, fontsize=13) . &lt;matplotlib.legend.Legend at 0x7fb5976e5a00&gt; . . . y = x.plot(kind=&#39;bar&#39;, x=&#39;Year&#39;, y= &#39;Ratio.Per GDP&#39;, figsize=(10,5)) y.set_xlabel(&#39;Year&#39;, fontsize=12) y.set_ylabel(&#39;Emissions per GDP&#39;, fontsize=12) y.set_title(&#39;Afghanistan Emissions per GDP from 1970-2012&#39;) y.legend([&#39;Afghanistan&#39;], loc=&#39;upper center&#39;, fontsize=13) . &lt;matplotlib.legend.Legend at 0x7fb5975b6b50&gt; . . year_entries = emissions_df[emissions_df[&#39;Year&#39;] == 2012] year_entries . Country Year Emissions.Type.CO2 Emissions.Type.N2O Emissions.Type.CH4 Emissions.Sector.Power Industry Emissions.Sector.Buildings Emissions.Sector.Transport Emissions.Sector.Other Industry Emissions.Sector.Other sectors Ratio.Per GDP Ratio.Per Capita . 42 Afghanistan | 2012 | 3610.00 | 7580.00 | 15800.0 | 2.10 | 0.75 | 6.35 | 0.18 | 0.27 | 0.880562 | 0.478037 | . 85 Albania | 2012 | 787.00 | 2810.00 | 4120.0 | 0.00 | 0.49 | 2.25 | 0.74 | 1.06 | 2.641683 | 0.271724 | . 128 Algeria | 2012 | 6240.00 | 127000.00 | 71000.0 | 30.93 | 20.33 | 38.44 | 22.48 | 24.97 | 5.443070 | 0.412985 | . 171 Angola | 2012 | 4110.00 | 24700.00 | 36100.0 | 1.84 | 4.61 | 7.11 | 2.41 | 7.74 | 2.586921 | 0.431173 | . 214 Anguilla | 2012 | 0.48 | 4.76 | 26.0 | 0.00 | 0.00 | 0.02 | 0.00 | 0.00 | 2.212629 | 0.109626 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 8212 Viet Nam | 2012 | 20400.00 | 165000.00 | 110000.0 | 41.46 | 11.35 | 29.61 | 42.35 | 29.26 | 3.263215 | 0.677397 | . 8255 Virgin Islands | 2012 | 5.17 | 10.40 | 85.0 | 0.06 | 0.01 | 0.04 | 0.00 | 0.00 | 3.528594 | 0.172276 | . 8298 Yemen | 2012 | 4610.00 | 18500.00 | 22700.0 | 5.81 | 3.03 | 5.48 | 3.10 | 3.66 | 1.838715 | 0.510111 | . 8341 Zambia | 2012 | 3380.00 | 6350.00 | 10400.0 | 0.03 | 0.24 | 0.91 | 1.53 | 0.85 | 1.363735 | 0.390306 | . 8384 Zimbabwe | 2012 | 4140.00 | 11300.00 | 10600.0 | 5.55 | 1.34 | 2.58 | 1.97 | 1.04 | 1.775448 | 1.084327 | . 195 rows × 12 columns . . z = year_entries.plot(kind=&#39;barh&#39;, x=&#39;Country&#39;, y=&#39;Ratio.Per GDP&#39;, figsize=(7,40)) z.set_xlabel(&#39;Emissions per GDP&#39;, fontsize=16) z.set_ylabel(&#39;Country&#39;, fontsize=16) z.set_title(&#39;Emissions per GDP in 2012 by Country&#39;) . Text(0.5, 1.0, &#39;Emissions per GDP in 2012 by Country&#39;) . . qatar_emissions = emissions_df[emissions_df[&#39;Country&#39;] == &#39;Qatar&#39;] qatar_emissions . Country Year Emissions.Type.CO2 Emissions.Type.N2O Emissions.Type.CH4 Emissions.Sector.Power Industry Emissions.Sector.Buildings Emissions.Sector.Transport Emissions.Sector.Other Industry Emissions.Sector.Other sectors Ratio.Per GDP Ratio.Per Capita . 6063 Qatar | 1970 | 81.5 | 14700.0 | 51600.0 | 1.17 | 0.01 | 0.23 | 0.82 | 6.22 | 606.30250 | 3.586208 | . 6064 Qatar | 1971 | 97.9 | 18300.0 | 66400.0 | 1.17 | 0.01 | 0.23 | 0.82 | 7.97 | 710.07460 | 4.166371 | . 6065 Qatar | 1972 | 115.0 | 22000.0 | 80800.0 | 1.28 | 0.02 | 0.27 | 0.90 | 9.70 | 788.46380 | 4.549067 | . 6066 Qatar | 1973 | 128.0 | 24700.0 | 87700.0 | 1.75 | 0.02 | 0.33 | 1.35 | 10.54 | 791.26530 | 4.483610 | . 6067 Qatar | 1974 | 115.0 | 20800.0 | 73100.0 | 1.48 | 0.03 | 0.39 | 1.10 | 8.94 | 611.73990 | 3.565528 | . 6068 Qatar | 1975 | 115.0 | 20000.0 | 61700.0 | 2.44 | 0.02 | 0.45 | 2.03 | 7.55 | 497.12060 | 2.930370 | . 6069 Qatar | 1976 | 115.0 | 18700.0 | 62100.0 | 0.85 | 0.03 | 0.64 | 1.96 | 7.67 | 465.30800 | 2.593659 | . 6070 Qatar | 1977 | 114.0 | 16700.0 | 51400.0 | 1.39 | 0.03 | 0.79 | 1.83 | 6.47 | 374.18310 | 2.503504 | . 6071 Qatar | 1978 | 123.0 | 18900.0 | 60400.0 | 1.39 | 0.03 | 0.84 | 1.57 | 7.68 | 413.28450 | 2.585384 | . 6072 Qatar | 1979 | 123.0 | 17700.0 | 45200.0 | 2.29 | 0.03 | 0.93 | 2.95 | 6.07 | 307.15270 | 1.901910 | . 6073 Qatar | 1980 | 115.0 | 14700.0 | 28900.0 | 3.01 | 0.20 | 1.05 | 2.72 | 4.31 | 195.48350 | 1.302520 | . 6074 Qatar | 1981 | 105.0 | 11900.0 | 11900.0 | 3.18 | 0.01 | 1.19 | 4.09 | 2.22 | 96.40291 | 0.799811 | . 6075 Qatar | 1982 | 109.0 | 12700.0 | 11600.0 | 3.46 | 0.13 | 1.37 | 4.25 | 2.33 | 88.34894 | 0.908933 | . 6076 Qatar | 1983 | 107.0 | 11500.0 | 4370.0 | 3.47 | 0.03 | 1.38 | 4.67 | 1.60 | 51.52252 | 0.609743 | . 6077 Qatar | 1984 | 128.0 | 16500.0 | 20000.0 | 4.01 | 0.03 | 1.28 | 5.34 | 3.64 | 107.09440 | 1.327974 | . 6078 Qatar | 1985 | 132.0 | 15600.0 | 15900.0 | 4.38 | 0.19 | 1.25 | 4.85 | 3.18 | 85.25619 | 1.380835 | . 6079 Qatar | 1986 | 141.0 | 16400.0 | 15700.0 | 4.60 | 0.05 | 1.24 | 5.51 | 3.43 | 80.94232 | 1.778108 | . 6080 Qatar | 1987 | 147.0 | 16500.0 | 15200.0 | 4.62 | 0.12 | 1.26 | 5.63 | 3.54 | 75.50456 | 1.595762 | . 6081 Qatar | 1988 | 154.0 | 16900.0 | 14900.0 | 5.42 | 0.05 | 1.37 | 5.20 | 3.66 | 72.03886 | 1.587025 | . 6082 Qatar | 1989 | 165.0 | 17600.0 | 14800.0 | 5.98 | 0.22 | 1.59 | 5.03 | 3.81 | 70.50597 | 1.450337 | . 6083 Qatar | 1990 | 161.0 | 17100.0 | 14400.0 | 5.21 | 0.09 | 1.47 | 5.65 | 3.86 | 66.40818 | 1.126555 | . 6084 Qatar | 1991 | 165.0 | 18200.0 | 14100.0 | 5.39 | 0.08 | 1.49 | 6.78 | 3.79 | 66.56635 | 1.367289 | . 6085 Qatar | 1992 | 174.0 | 19100.0 | 13900.0 | 5.25 | 0.10 | 1.58 | 7.52 | 4.19 | 66.92946 | 1.367888 | . 6086 Qatar | 1993 | 184.0 | 19600.0 | 13500.0 | 5.77 | 0.11 | 1.67 | 7.71 | 4.05 | 66.35418 | 1.420117 | . 6087 Qatar | 1994 | 194.0 | 20700.0 | 12500.0 | 6.31 | 0.13 | 1.78 | 7.82 | 4.47 | 65.77494 | 1.416824 | . 6088 Qatar | 1995 | 203.0 | 21100.0 | 11300.0 | 6.79 | 0.13 | 1.97 | 7.93 | 4.17 | 63.49950 | 1.269383 | . 6089 Qatar | 1996 | 214.0 | 22900.0 | 13900.0 | 6.94 | 0.14 | 2.10 | 8.45 | 5.18 | 71.03995 | 1.416342 | . 6090 Qatar | 1997 | 236.0 | 28200.0 | 22600.0 | 7.00 | 0.15 | 2.35 | 9.67 | 8.75 | 95.31660 | 1.489884 | . 6091 Qatar | 1998 | 242.0 | 29800.0 | 21600.0 | 7.02 | 0.16 | 2.47 | 10.77 | 9.09 | 93.74927 | 1.548840 | . 6092 Qatar | 1999 | 244.0 | 32500.0 | 23400.0 | 7.10 | 0.12 | 2.29 | 13.03 | 9.70 | 98.55574 | 1.277482 | . 6093 Qatar | 2000 | 251.0 | 32000.0 | 24500.0 | 7.08 | 0.13 | 2.42 | 11.63 | 10.49 | 95.73902 | 0.873997 | . 6094 Qatar | 2001 | 236.0 | 32600.0 | 22900.0 | 7.81 | 0.12 | 2.62 | 11.92 | 9.83 | 90.22863 | 0.826160 | . 6095 Qatar | 2002 | 270.0 | 36500.0 | 23400.0 | 8.60 | 0.14 | 2.90 | 14.92 | 9.63 | 93.08317 | 0.832120 | . 6096 Qatar | 2003 | 277.0 | 38500.0 | 25600.0 | 9.41 | 0.14 | 3.36 | 14.94 | 10.40 | 93.58826 | 0.858370 | . 6097 Qatar | 2004 | 289.0 | 41500.0 | 27900.0 | 8.63 | 0.14 | 3.76 | 18.33 | 10.24 | 91.76708 | 0.779404 | . 6098 Qatar | 2005 | 301.0 | 43600.0 | 27900.0 | 8.94 | 0.16 | 4.73 | 19.37 | 10.23 | 83.01875 | 0.747050 | . 6099 Qatar | 2006 | 330.0 | 48900.0 | 30200.0 | 10.58 | 0.19 | 5.65 | 22.03 | 10.25 | 78.64031 | 0.655008 | . 6100 Qatar | 2007 | 386.0 | 55700.0 | 34200.0 | 11.06 | 0.19 | 5.77 | 26.19 | 10.90 | 75.91918 | 0.631035 | . 6101 Qatar | 2008 | 439.0 | 60900.0 | 39800.0 | 11.60 | 0.24 | 8.08 | 26.67 | 11.36 | 72.75532 | 0.600772 | . 6102 Qatar | 2009 | 471.0 | 65100.0 | 43200.0 | 12.31 | 0.25 | 10.75 | 27.01 | 12.29 | 68.38123 | 0.577105 | . 6103 Qatar | 2010 | 494.0 | 73000.0 | 53000.0 | 13.94 | 0.27 | 10.50 | 32.38 | 12.68 | 71.10377 | 0.561188 | . 6104 Qatar | 2011 | 452.0 | 77400.0 | 62900.0 | 15.12 | 0.30 | 10.12 | 37.18 | 13.71 | 72.09162 | 0.550776 | . 6105 Qatar | 2012 | 513.0 | 86500.0 | 66200.0 | 17.23 | 0.31 | 10.64 | 42.66 | 11.05 | 72.62834 | 0.571643 | . q = qatar_emissions.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Ratio.Per GDP&#39;, figsize=(10,7)) q.set_xlabel(&#39;Year&#39;, fontsize=13) q.set_ylabel(&#39;Emissions per GDP&#39;) q.set_title(&#39;Qatar Emissions per GDP from 1970-2012&#39;) q.legend([&#39;Qatar&#39;]) . &lt;matplotlib.legend.Legend at 0x7fb58f925370&gt; . .",
            "url": "https://karinnm.github.io/fastaitest/fastpages/jupyter/2022/03/05/Assignment-3.html",
            "relUrl": "/fastpages/jupyter/2022/03/05/Assignment-3.html",
            "date": " • Mar 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://karinnm.github.io/fastaitest/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://karinnm.github.io/fastaitest/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://karinnm.github.io/fastaitest/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://karinnm.github.io/fastaitest/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}